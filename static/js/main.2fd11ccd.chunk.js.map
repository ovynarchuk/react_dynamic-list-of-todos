{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","isClickedId","setIsClickedId","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","query","setQuery","setFilterType","onChange","event","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","shownUser","setShownUser","isModalLoaderShown","setIsModalLoaderShown","selectedTodo","find","useEffect","userId","response","href","email","name","App","setTodos","isLoaderShown","setIsLoaderShown","filterType","preparedTodos","copyTodos","filter","toLowerCase","includes","getPreparedTodos","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fd11ccd.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  isClickedId: number | null,\n  setIsClickedId: (id: number) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  isClickedId,\n  setIsClickedId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={classNames({\n              '': isClickedId !== todo.id,\n              'has-background-info-light': isClickedId === todo.id,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            {todo.completed ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  setIsClickedId(todo.id);\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': isClickedId !== todo.id,\n                    'fa-eye-slash': isClickedId === todo.id,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","interface Props {\n  query: string,\n  setQuery: (query: string) => void,\n  setFilterType: (fitlerType: string) => void,\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  setFilterType,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={(event) => setFilterType(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => {\n              setQuery('');\n            }}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  setIsClickedId: (id: number | null) => void,\n  todos: Todo[],\n  isClickedId: number | null,\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  todos,\n  setIsClickedId,\n  isClickedId,\n}) => {\n  const [shownUser, setShownUser] = useState<User | null>(null);\n  const [isModalLoaderShown, setIsModalLoaderShown] = useState(false);\n\n  const selectedTodo = todos.find(todo => todo.id === isClickedId);\n\n  useEffect(() => {\n    setIsModalLoaderShown(true);\n\n    if (selectedTodo) {\n      getUser(selectedTodo.userId).then((response) => {\n        setShownUser(response);\n        setIsModalLoaderShown(false);\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isModalLoaderShown ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setIsClickedId(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${shownUser?.email}`}>\n                {shownUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nconst getPreparedTodos = (todos: Todo[], query: string, filterType: string) => {\n  let copyTodos = [...todos];\n\n  if (query) {\n    copyTodos = copyTodos.filter(todo => {\n      const normalizedTitle = todo.title.toLowerCase();\n\n      return normalizedTitle.toLowerCase().includes(query.toLowerCase());\n    });\n  }\n\n  copyTodos = copyTodos.filter(todo => {\n    if (filterType === 'active') {\n      return todo.completed === false;\n    }\n\n    if (filterType === 'completed') {\n      return todo.completed === true;\n    }\n\n    return todo;\n  });\n\n  return copyTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoaderShown, setIsLoaderShown] = useState(true);\n  const [isClickedId, setIsClickedId] = useState<number | null>(null);\n  const [query, setQuery] = useState('');\n  const [filterType, setFilterType] = useState('all');\n\n  const preparedTodos = getPreparedTodos(todos, query, filterType);\n\n  useEffect(() => {\n    getTodos().then((data) => {\n      setTodos(data);\n      setIsLoaderShown(false);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                setFilterType={setFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoaderShown ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={preparedTodos}\n                  isClickedId={isClickedId}\n                  setIsClickedId={(id) => setIsClickedId(id)}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isClickedId && (\n        <TodoModal\n          setIsClickedId={(id) => setIsClickedId(id)}\n          todos={preparedTodos}\n          isClickedId={isClickedId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}